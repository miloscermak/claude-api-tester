<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claude API Tester</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 { font-size: 2.5rem; margin-bottom: 10px; font-weight: 300; }
        .header p { opacity: 0.9; font-size: 1.1rem; }
        .form-section { padding: 40px; background: #f8f9ff; }
        .form-group { margin-bottom: 25px; }
        label { display: block; margin-bottom: 8px; font-weight: 600; color: #4a5568; }
        input, textarea, select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        textarea { resize: vertical; min-height: 100px; }
        .model-selection {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 10px;
        }
        .model-checkbox {
            display: flex;
            align-items: center;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .model-checkbox:hover { border-color: #667eea; background: #f0f4ff; }
        .model-checkbox input[type="checkbox"] { width: auto; margin-right: 10px; }
        .control-buttons { display: flex; gap: 15px; margin-top: 30px; }
        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            flex: 1;
        }
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }
        .btn-secondary { background: #e2e8f0; color: #4a5568; }
        .btn-secondary:hover { background: #cbd5e0; }
        .btn:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        .progress-section { padding: 40px; background: white; border-top: 1px solid #e2e8f0; }
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 15px;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            width: 0%;
            transition: width 0.3s ease;
        }
        .progress-text { text-align: center; color: #4a5568; font-weight: 600; }
        .results-section { padding: 40px; background: #f8f9ff; border-top: 1px solid #e2e8f0; }
        .results-grid { display: grid; gap: 20px; margin-top: 20px; }
        .result-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #667eea;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        }
        .result-card.error { border-left-color: #e53e3e; }
        .result-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .result-model { font-weight: 600; color: #667eea; }
        .result-iteration { font-size: 14px; color: #718096; }
        .result-content { white-space: pre-wrap; line-height: 1.6; color: #2d3748; }
        .error-content { color: #e53e3e; }
        .hidden { display: none; }
        .info-box {
            background: #e6fffa;
            border-left: 4px solid #38b2ac;
            padding: 15px;
            margin-bottom: 25px;
            border-radius: 5px;
        }
        .info-box p { margin: 0; color: #2c7a7b; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Claude API Tester</h1>
            <p>Testujte různé modely Claude s opakovanými dotazy</p>
        </div>
        <div class="form-section">
            <div class="info-box">
                <p><strong>Návod:</strong> Zadejte váš Anthropic API klíč, otázku a počet opakování. Vyberte modely které chcete testovat a spusťte test. Výsledky můžete exportovat do Excel souboru.</p>
            </div>
            <form id="testForm">
                <div class="form-group">
                    <label for="apiKey">API klíč Anthropic:</label>
                    <input type="password" id="apiKey" placeholder="sk-ant-..." required>
                </div>
                <div class="form-group">
                    <label for="question">Otázka:</label>
                    <textarea id="question" placeholder="Napište otázku, kterou chcete položit..." required></textarea>
                </div>
                <div class="form-group">
                    <label for="iterations">Počet opakování (1-100):</label>
                    <input type="number" id="iterations" min="1" max="100" value="3" required>
                </div>
                <div class="form-group">
                    <label>Vyberte modely Claude:</label>
                    <div class="model-selection">
                        <div class="model-checkbox">
                            <input type="checkbox" id="claude-opus-4" value="claude-opus-4-20250514" checked>
                            <label for="claude-opus-4">Claude Opus 4</label>
                        </div>
                        <div class="model-checkbox">
                            <input type="checkbox" id="claude-sonnet-4" value="claude-sonnet-4-20250514">
                            <label for="claude-sonnet-4">Claude Sonnet 4</label>
                        </div>
                        <div class="model-checkbox">
                            <input type="checkbox" id="claude-3-7-sonnet" value="claude-3-7-sonnet-20250219">
                            <label for="claude-3-7-sonnet">Claude Sonnet 3.7</label>
                        </div>
                    </div>                        <div class="model-checkbox">
                            <input type="checkbox" id="claude-sonnet-4" value="claude-sonnet-4-20250514">
                            <label for="claude-sonnet-4">Claude Sonnet 4</label>
                        </div>
                        <div class="model-checkbox">
                            <input type="checkbox" id="claude-3-7-sonnet" value="claude-3-7-sonnet-20250219">
                            <label for="claude-3-7-sonnet">Claude Sonnet 3.7</label>
                        </div>
                    </div>
                </div>
                <div class="control-buttons">
                    <button type="submit" class="btn btn-primary" id="startBtn">Spustit test</button>
                    <button type="button" class="btn btn-secondary" id="exportBtn" disabled>Exportovat do Excel</button>
                </div>
            </form>
        </div>
        <div class="progress-section hidden" id="progressSection">
            <h3>Průběh testování</h3>
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">Připravuje se...</div>
        </div>
        <div class="results-section hidden" id="resultsSection">
            <h3>Výsledky</h3>
            <div class="results-grid" id="resultsGrid"></div>
        </div>
    </div>
    <script>
        let testResults = [];
        let isRunning = false;
        
        document.getElementById('testForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            if (isRunning) return;
            await startTest();
        });
        
        document.getElementById('exportBtn').addEventListener('click', exportToExcel);
        
        async function startTest() {
            isRunning = true;
            testResults = [];
            
            const apiKey = document.getElementById('apiKey').value;
            const question = document.getElementById('question').value;
            const iterations = parseInt(document.getElementById('iterations').value);
            
            const selectedModels = Array.from(document.querySelectorAll('.model-checkbox input:checked'))
                .map(cb => ({
                    name: cb.nextElementSibling.textContent,
                    id: cb.value
                }));
            
            if (selectedModels.length === 0) {
                alert('Vyberte alespoň jeden model!');
                isRunning = false;
                return;
            }
            
            document.getElementById('progressSection').classList.remove('hidden');
            document.getElementById('resultsSection').classList.remove('hidden');
            document.getElementById('resultsGrid').innerHTML = '';
            document.getElementById('startBtn').disabled = true;
            document.getElementById('exportBtn').disabled = true;
            
            const totalRequests = selectedModels.length * iterations;
            let completedRequests = 0;
            
            try {
                for (const model of selectedModels) {
                    for (let i = 1; i <= iterations; i++) {
                        updateProgress(completedRequests, totalRequests, "Testování " + model.name + " - pokus " + i + "/" + iterations);
                        
                        try {
                            const result = await callClaudeAPI(apiKey, model.id, question);
                            const testResult = {
                                model: model.name,
                                iteration: i,
                                question: question,
                                response: result,
                                timestamp: new Date().toISOString(),
                                success: true
                            };
                            
                            testResults.push(testResult);
                            displayResult(testResult);
                            
                        } catch (error) {
                            const testResult = {
                                model: model.name,
                                iteration: i,
                                question: question,
                                response: "Chyba: " + error.message,
                                timestamp: new Date().toISOString(),
                                success: false
                            };
                            
                            testResults.push(testResult);
                            displayResult(testResult);
                        }
                        
                        completedRequests++;
                        
                        if (completedRequests < totalRequests) {
                            await new Promise(resolve => setTimeout(resolve, 1500));
                        }
                    }
                }
                
                updateProgress(totalRequests, totalRequests, 'Test dokončen!');
                document.getElementById('exportBtn').disabled = false;
                
            } catch (error) {
                alert("Chyba při testování: " + error.message);
            }
            
            document.getElementById('startBtn').disabled = false;
            isRunning = false;
        }
        
        async function callClaudeAPI(apiKey, model, message) {
            const response = await fetch('/api/claude', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ apiKey: apiKey, model: model, message: message })
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'API chyba');
            }
            
            const data = await response.json();
            return data.content;
        }
        
        function updateProgress(completed, total, text) {
            const percentage = (completed / total) * 100;
            document.getElementById('progressFill').style.width = percentage + '%';
            document.getElementById('progressText').textContent = text;
        }
        
        function displayResult(result) {
            const resultsGrid = document.getElementById('resultsGrid');
            const resultCard = document.createElement('div');
            resultCard.className = 'result-card ' + (result.success ? '' : 'error');
            
            resultCard.innerHTML = 
                '<div class="result-header">' +
                    '<div class="result-model">' + result.model + '</div>' +
                    '<div class="result-iteration">Pokus ' + result.iteration + '</div>' +
                '</div>' +
                '<div class="result-content ' + (result.success ? '' : 'error-content') + '">' + result.response + '</div>';
            
            resultsGrid.appendChild(resultCard);
            resultCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
        
        function exportToExcel() {
            if (testResults.length === 0) {
                alert('Žádné výsledky k exportu!');
                return;
            }
            
            const wsData = [['Model', 'Pokus', 'Otázka', 'Odpověď', 'Časová značka', 'Úspěch']];
            
            testResults.forEach(result => {
                wsData.push([
                    result.model,
                    result.iteration,
                    result.question,
                    result.response,
                    result.timestamp,
                    result.success ? 'Ano' : 'Ne'
                ]);
            });
            
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.aoa_to_sheet(wsData);
            
            const colWidths = [
                { wch: 20 }, { wch: 8 }, { wch: 50 }, { wch: 100 }, { wch: 20 }, { wch: 8 }
            ];
            ws['!cols'] = colWidths;
            
            XLSX.utils.book_append_sheet(wb, ws, 'Claude API Test');
            
            const fileName = 'claude_api_test_' + new Date().toISOString().slice(0, 19).replace(/:/g, '-') + '.xlsx';
            XLSX.writeFile(wb, fileName);
        }
    </script>
</body>
</html>
